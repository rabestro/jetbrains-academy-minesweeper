
first_question          = The program should ask user about number of mines on the field.

ask_coordinates         = The program should ask user for coordinates and operation

board_header_numbers    = The board should have numbers from 1 to 9 in header.

illegal_symbol          = A row of the grid should contain only ''/'', ''X'', ''.'' or ''*'' or numbers. The output contains unexpected symbols: \"{0}\"

no_failed_and_x         = The word \"failed\" was not found, but the last grid contains 'X' characters. This should not be the case.

impossible_slash_dot    = The last grid contains ''.'' and ''/'' characters that are next to each other. This situation is impossible.

impossible_slash_x      = The last grid contains "X" and "/" characters that are next to each other. This situation is impossible.

impossible_slash_asterisk       = The last grid contains ''*'' and ''/'' characters that are next to each other. \
  This situation is impossible. If there is '*' character that is next to '/' it should be replaced to '/' or to a number.

impossible_3            = There is a number " + num + " in the last grid, but there are fewer free \
  fields around which to put a mine. This situation is impossible.

no_nine_lines           = Found grid that contains {0} lines but grid should contain 9 lines. \n\
  The tests assume that the grid is between the lines containing the line \"-â”‚--\".

less_then_13_lines      = The output should be no less then 13 lines. The output contains only {0} lines.

cells_number_incorrect  = The field should contains exactly {0} cells but output contains only {1} cells.

first_free_move         = The user should not lose after the first "free" move.

expect_one_asterisk     = Expected one asterisk on the board.

expect_no_asterisk      = Expected no asterisk on the board.

no_failed_after_mark    = The word "failed" is found after mark a cell as mine with ''*''. This situation is impossible.

expected_playing         = After unset a mine mark the game should continue.

no_mine_found           = The test set/unset all cells in one mine game but can''t find a mine.

no_last_message         = The last line should contains failed or congratulations or set/unset mines. Neither found.

no_mines_before_free_move = The mines should be placed only after the very first "free" move.

no_output_found     = No output found.

dot_not_equals_mines = After winning the game the count of "." is not equals to the specified mines count.


unexpected_error = Unexpected message.

x_not_equals_mines = After losing the game the count of "X" is not equals to the specified mines count.

mines_not_equals_x = There {0,choice,1#is one mine|1<are {0,number,integer} mines} in the last grid marked 'X'. \
    But initially the user entered 

# There " + (minesCount > 1? "are" : "is") +
#                            " " + minesCount + " mine" + (minesCount > 1? "s": "") +
#                            " in the last grid marked 'X'. " +
#                            "But initially the user " +
#                            "But initially the user " + state.minesCount + " mine" +
#                            (state.minesCount > 1? "s": "") +". " +
#                            "Every real mine should be marked as 'X' at the end " +
#                            "in case of failure."
